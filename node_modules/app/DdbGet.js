var WebIsf=require('app/WebIsf');
var WebPml=require('app/WebPml');
var WebDawlati=require('app/WebDawlati');
var AWS = require("aws-sdk");
var doc = require('dynamodb-doc'); // https://www.npmjs.com/package/dynamodb-doc

AWS.config.update({region: "us-west-2"});

// JS Class declaration
// For nodejs exports, check bottom of file
function DdbGet() {

  var event,context,silent;
  this.data2={};
  this.dynamo = new doc.DynamoDB();
  var self=this;

  this.init=function(event,context,silent) {
  // event: structure containing data: car plate number, area, mechanique fields
  // context: object with succeed function and fail function
    self.event=event;
    self.context=context;
    self.data2={};

    silent=!!silent;
    self.silent=silent;
    if(!self.silent) console.log('Received event:', JSON.stringify(event, null, 2));

  }

  this.deleteFieldFromData=function(f,id) {
    if(self.data2[id].hasOwnProperty(f)) {
      delete self.data2[id][f];
    }
  };

  this.conclude = function(data) {
    self.data2[data.id]=JSON.parse(JSON.stringify(data));
    self.deleteFieldFromData("lastGetTs", data.id);
    self.deleteFieldFromData("addedTs", data.id);
    self.deleteFieldFromData("emails", data.id);
    self.deleteFieldFromData("l", data.id);
    self.deleteFieldFromData("id", data.id);

    if(Object.keys(self.data2).length==self.event.length) {
      if(!self.silent) console.log('Response to event:', JSON.stringify(self.data2, null, 2));
      self.context.succeed(self.data2);
    }
  };

  this.prepare=function(x,dataIsf,dataPml,dataMech) {

   // reformat for return
    todayTs=new Date().toISOString().replace(/T/," ").replace(/\..*/,"");
    data=JSON.parse(JSON.stringify(x));
    data.lastGetTs=todayTs;
    data.addedTs=todayTs;
    data.isf=dataIsf;
    data.id=x.a+"/"+x.n;
    data.dataTs=todayTs;
    data.pml=dataPml;
    if(dataMech) data.dm=dataMech;

    // store in dynamodb
    //console.log("put",data);
    self.dynamo.putItem({
       "TableName":"zboota-cars",
       "Item":data
    },function(err,data3) {
       if(err!=null) {
         // http://docs.aws.amazon.com/lambda/latest/dg/programming-model.html
         self.context.fail("Failed to put to dynamodb. "+err);
       } else {
         // return
         self.conclude(data);
       }
    });
  };

  this.get = function() {
    self.event.map(function(x) {
  
      self.dynamo.getItem({
          "TableName":"zboota-cars",
          "Key":{"id":x.a+"/"+x.n}
      }, function(err,data) {

        // \TODO integrate force parameter, as in syncCore, so as the test mech from cache after late addition of mech info will retrieve mech and pass
    
        if(data==null || Object.keys(data).length==0) {
          WebIsf.handler(x,function(dataIsf) {
          WebPml.handler(x,function(dataPml) {
            if(x.hasOwnProperty('t')&&x.hasOwnProperty('hp')&&x.hasOwnProperty('y')) {
              WebDawlati.handler(x,function(dataMech) {
                self.prepare(x,dataIsf,dataPml,dataMech);
              });
            } else {
              self.prepare(x,dataIsf,dataPml);
            }
          }); // end WebPml
          }); // end WebIsf
        } else {            
          //console.log("found",data);
          // update last get timestamp
          data=data.Item;
          self.conclude(data);
        }
      });
    });
    
  };

} // end class DdbGet

dg=new DdbGet();
exports.init=dg.init;
exports.get=dg.get;
