var WebIsf=require('app/WebIsf');
var WebPml=require('app/WebPml');
var WebDawlati=require('app/WebDawlati');
var AWS = require("aws-sdk");
var doc = require('dynamodb-doc'); // https://www.npmjs.com/package/dynamodb-doc
var config = require('app/config.json');
var Validator = require('app/Validator');
require('app/every');

AWS.config.update({region: config.ZBOOTA_SERVER_AWS_REGION});

// JS Class declaration
// For nodejs exports, check bottom of file
var DdbGet = function(event,context,silent) {
// event: structure containing data: car plate number, area, mechanique fields
// context: object with succeed function and fail function

  var event,context,silent;
  this.data2={};
  this.dynamo = new doc.DynamoDB();
  this.invalid = false;

  this.event=event;
  this.context=context;
  this.data2={};

  silent=!!silent;
  this.silent=silent;
  if(!this.silent) console.log('Received event:', JSON.stringify(event, null, 2));

  // check that event has correct format
  if(event.constructor !== Array) {
    context.fail("Event should be array");
    this.invalid=true;
    return;
  }
  if(!event.map(function(x) {
    return x.hasOwnProperty("a")&&x.hasOwnProperty("n")&&!!x.a&&!!x.n;
    }).every()) {
      context.fail("Event elements should all have n and a fields");
      this.invalid=true;
      return;
  }
  if(!event.map(function(x) { return Validator.validArea(x.a); }).every()) {
    context.fail("Some area fields are invalid");
    this.invalid=true;
    return;
  }
  if(!event.map(function(x) { return Validator.validNumber(x.n); }).every()) {
    context.fail("Some number fields are invalid");
    this.invalid=true;
    return;
  }
  if(!event.map(function(x) {
      return (x.hasOwnProperty("hp")&&x.hasOwnProperty("y")&&x.hasOwnProperty("t")) ||
        (!x.hasOwnProperty("hp")&&!x.hasOwnProperty("y")&&!x.hasOwnProperty("t"));
    }).every()) {
      context.fail("Event elements should either have all mech fields or no mech fields");
      this.invalid=true;
      return;
  }
  if(!event.map(function(x) { return !x.hasOwnProperty("l")||!!x.l; }).every()) {
    context.fail("Event elements should either not have l field or have it non-empty");
    this.invalid=true;
    return;
  }

  // context should have succeed and fail functions
  if(!Validator.validContext(context)) throw("Context is invalid");

};

DdbGet.prototype.deleteFieldFromData=function(f,id) {
  if(this.data2[id].hasOwnProperty(f)) {
    delete this.data2[id][f];
  }
};

DdbGet.prototype.conclude = function(data,hasMech) {
  this.data2[data.id]=JSON.parse(JSON.stringify(data));
  this.deleteFieldFromData("lastGetTs", data.id);
  this.deleteFieldFromData("addedTs", data.id);
  this.deleteFieldFromData("emails", data.id);
  this.deleteFieldFromData("l", data.id);
  this.deleteFieldFromData("id", data.id);

  if(!hasMech) {
    this.deleteFieldFromData("dm", data.id);
    this.deleteFieldFromData("hp", data.id);
    this.deleteFieldFromData("t",  data.id);
    this.deleteFieldFromData("y",  data.id);
  }

  if(Object.keys(this.data2).length==this.event.length) {
    if(!this.silent) console.log('Response to event:', JSON.stringify(this.data2, null, 2));
    this.context.succeed(this.data2);
  }
};

DdbGet.prototype.prepare=function(x,dataIsf,dataPml,dataMech) {

 // reformat for return
  todayTs=new Date().toISOString().replace(/T/," ").replace(/\..*/,"");
  data=JSON.parse(JSON.stringify(x));
  data.lastGetTs=todayTs;
  data.addedTs=todayTs;
  data.isf=dataIsf;
  data.id=x.a+"/"+x.n;
  data.dataTs=todayTs;
  data.pml=dataPml;
  if(dataMech) {
    data.dm=dataMech;
  }

  // store in dynamodb
  //console.log("put",data);
  var self=this;
  this.dynamo.putItem({
     "TableName":"zboota-cars",
     "Item":data
  },function(err,data3) {
     if(err!=null) {
       // http://docs.aws.amazon.com/lambda/latest/dg/programming-model.html
       self.context.fail("Failed to put to dynamodb. "+err);
     } else {
       // return
       self.conclude(data,!!dataMech);
     }
  });
};

DdbGet.prototype.get = function() {
  var self=this;
  this.event.map(function(x) {

    self.dynamo.getItem({
        "TableName":"zboota-cars",
        "Key":{"id":x.a+"/"+x.n}
    }, function(err,data) {

      // Integrate getFromWeb parameter, as force parameter in syncCore.php
      // Its role is so the test mech from cache after late addition of mech info will retrieve mech and pass
      getFromWeb=data==null || Object.keys(data).length==0 || !data.hasOwnProperty("Item");
      var hasMech=x.hasOwnProperty('t') && x.hasOwnProperty('hp') && x.hasOwnProperty('y');

      // modify to true in case of forced request
      if(!getFromWeb) {

        ['t','hp','y'].forEach(function(k2) {
          getFromWeb=getFromWeb||
            (!data.Item.hasOwnProperty(k2) && x.hasOwnProperty(k2)) ||
            ( data.Item.hasOwnProperty(k2) && x.hasOwnProperty(k2) && data['Item'][k2]!=x[k2]);
        });
        ['dm','pml','isf'].forEach(function(k2) {
          if(data['Item'].hasOwnProperty(k2)) {
            if(k2=="dm") {
              getFromWeb=getFromWeb||(data['Item'][k2]=="Not available");
            } else {
              getFromWeb=getFromWeb||(data['Item'][k2]=="Not available" && hasMech );
            }
          }
        });
        var todayD=new Date().toISOString().substr(0,10);
        getFromWeb=getFromWeb||(todayD > data['Item']['dataTs'].substr(0,10));
      }

      // if need to get from web
      if(getFromWeb) {
        WebIsf.handler(x,function(dataIsf) {
        WebPml.handler(x,function(dataPml) {
          if(hasMech) {
            WebDawlati.handler(x,function(dataMech) {
              self.prepare(x,dataIsf,dataPml,dataMech);
            });
          } else {
            self.prepare(x,dataIsf,dataPml);
          }
        }); // end WebPml
        }); // end WebIsf
      } else {            
        //console.log("found",data);
        // update last get timestamp
        data=data.Item;
        self.conclude(data,hasMech);
      }
    });
  });
  
};

DdbGet.prototype.DdbGet = DdbGet;

module.exports = function (event,context,silent) {
  return new DdbGet(event,context,silent);
};
