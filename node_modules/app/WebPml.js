// Parkmeter lebanon updated their website
// This scraper is updated to follow it

var http=require('http'); 
var request=require('request'); // https://github.com/request/request
var should = require('should');
var xpath=require('xpath'); // https://www.npmjs.com/package/xpath
var dom = require('xmldom').DOMParser;
var querystring=require('querystring');
var Validator = require('app/Validator');
var WebAvailability = require('app/WebAvailability');

var urls = require('app/urls.json');

exports.handler = function(data,callbackFn) {

  if(!Validator.validArea(data.a)) {
    callbackFn("Invalid area code");
    return;
  }

  if(!Validator.validNumber(data.n)) {
    callbackFn("Invalid plate number");
    return;
  }

  //console.log('get pml');
  var du = new WebAvailability({
    fail:function(err) { callbackFn("Error in web availability check"); },
    succeed: function(res) {
      if(!res.pml) { callbackFn("Not available"); return; }

      var options = {
          url: urls['pml']['form'],
          timeout:5000,
          headers: {
            'Cache-Control': 'no-cache'
           },
          json: {
            PlateNumber: data.n,
            Code: data.a
          }
      };
    
      //console.log('pre post');
      rereq=request.post(
          options,
          function (error, response, body) {
            //console.log('in post');
            //console.log(response);
            if(!response) { callbackFn("Not available"); return; }
            if (error || response.statusCode != 200) {
               // : "+error+","+response.statusCode);
              callbackFn("Not available");
              return;
            }

            body = body.replace(/[\n\t\r]/g,"");
            body = body.replace(/<table.*>.*<\/table>/,"");
            //console.log("body", body);

            // http://stackoverflow.com/questions/16010551/getting-element-using-xpath-and-cheerio
            var doc = new dom().parseFromString(body)
            var m2 = xpath.select("//div/text()", doc).toString();
            //console.log("M1",m2,data);

            // some string manipulation
            var prefix = "مجموع القيمة المتوجبة للدفع"; // "total amount" in arabic (left-to-right)
            var no_outstanding = "لا يوجد أي بدلات وقوف إضافية متراكمة"; // THERE IS NO OUTSTANDING SURCHARGES
            if(m2==prefix+": 0 LBP"||m2==no_outstanding) {
               m2="None";
            } else {
               m2=m2.replace(prefix+": ","");
            }

            callbackFn(m2);
          }
      ); // end request.post
    }
  });
  du.init();

}; // end function  
