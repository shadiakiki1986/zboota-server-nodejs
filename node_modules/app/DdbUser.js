var AWS = require("aws-sdk");
var doc = require('dynamodb-doc'); // https://www.npmjs.com/package/dynamodb-doc
var MailManager = require('app/MailManager');
var Validator = require('app/Validator');
var config = require('app/config.json');

AWS.config.update({region: config.ZBOOTA_SERVER_AWS_REGION});


// JS Class declaration
// For nodejs exports, check bottom of file
var DdbUser = function(event,context,silent,skipPassCheck) {
// event: structure containing data: email, pass, region
// context: object with succeed function and fail function

  this.invalid=false;

  if(!event.hasOwnProperty("email") || !event.email) {
    context.fail("Missing email");
    this.invalid=true;
    return;
  }

  if(!skipPassCheck) {
    if(!event.hasOwnProperty("pass") || !event.pass) {
      context.fail("Missing password");
      this.invalid=true;
      return;
    }
  }

  // context should have succeed and fail functions
  if(!Validator.validContext(context)) throw("Context is invalid");

  // fields
  this.entry={};
  this.dynamo = new doc.DynamoDB();

  this.event=event;
  this.context=context;
  this.entry={};

  silent=!!silent;
  this.silent=silent;
  if(!this.silent) console.log('Received event:', JSON.stringify(event, null, 2));

  this.nowTs=new Date().toISOString().substr(0,19).replace("T"," ");

} // end class DdbUser

DdbUser.prototype.connect = function(cbFun) {
    var self=this;
    this.dynamo.getItem({
        TableName: "zboota-users",
        Key:{"email":this.event.email}
    }, function(err,data) {
      if(!!data&&!err&&data.hasOwnProperty("Item")) {
        self.entry=data.Item;
      } else {
        self.entry=null;
      }
      cbFun();
    });
};

DdbUser.prototype.delete = function() {
    var self=this;
    this.dynamo.deleteItem({
        TableName: "zboota-users",
        Key:{"email":this.event.email}
    }, function(err,data) {
      if(!!err) {
        self.context.fail(err);
      } else {
        if(!self.silent) console.log("deleted",self.event.email);
        self.context.succeed();
      }
    });
};

DdbUser.prototype.checkEmailRegistered=function() {
  return !!this.entry;
};

DdbUser.prototype.checkPassFail=function() {
  pf=0;
  if(this.entry.hasOwnProperty('passFail')) {
    pf = parseInt(this.entry['passFail']);
  }
  return pf < config.MAX_PASS_FAIL;
};

DdbUser.prototype.incrementPassFail=function(cbFun) {
  if(!this.entry.hasOwnProperty('passFail')) this.entry['passFail']=0;
  this.entry['passFail']=this.entry['passFail']+1;

  // http://docs.aws.amazon.com/aws-sdk-php/v2/api/class-Aws.DynamoDb.DynamoDbClient.html#_updateItem
  // http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html#Expressions.Modifying.UpdateExpressions.ADD
  var self=this;
  this.dynamo.updateItem({
      TableName: 'zboota-users',
      Key: { email: this.event.email },
      ExpressionAttributeValues: { ':v1': 1, ':v0': 0},
      UpdateExpression: 'SET passFail = if_not_exists(passFail,:v0) + :v1'
  },function(err,data) {
    if(err) { self.context.fail("Error",err); return; }
    cbFun();
  });
};

DdbUser.prototype.checkPassword=function(cbFun) {
  // manage the passFail parameter for locking accounts
  var self=this;
  if(this.entry['pass']!=this.event.pass) {
    this.incrementPassFail(function() { self.context.fail("Wrong password."); });
  } else {
    cbFun();
  }
};

DdbUser.prototype.dropPassFail=function(cbFun) {
  if(this.entry.hasOwnProperty("passFail")) delete this.entry.passFail;
  var self=this;
  this.dynamo.updateItem({
      TableName: 'zboota-users',
      Key: { 'email': this.event.email },
      UpdateExpression: 'REMOVE passFail'
  },function(err,data) {
    if(err) { self.context.fail("Error",err); return; }
    cbFun();
  });
};

DdbUser.prototype.updateAccountNumbers=function(lpns) {
  this.entry['lpns']=lpns; // overwrite existing data with given data
  var self=this;
  this.dynamo.updateItem({
      TableName: 'zboota-users',
      Key: { 'email': this.event.email },
      ExpressionAttributeValues: {':v1': lpns},
      UpdateExpression: 'SET lpns = :v1'
  },function(err,data) {
    if(err) { self.context.fail("Error",err); return; }
    self.context.succeed({});
  });
};

DdbUser.prototype.updateLastloginDate=function(cbFun) {
  // overwrite existing data with given data
  this.entry['lastloginDate']=this.nowTs; 
  var self=this;
  this.dynamo.updateItem({
      TableName: 'zboota-users',
      Key: { 'email': this.event.email },
      ExpressionAttributeValues: {':v1': this.nowTs},
      UpdateExpression: 'SET lastloginDate = :v1'
  },function(err,data) {
    if(err) { self.context.fail("Error",err); return; }
    cbFun();
  });
};

DdbUser.prototype.generatePassword=function() {
  // generate random code
  this.event.pass=Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0,5);
};

DdbUser.prototype.initiateAccount=function() {
  data={ email: this.event.email,
         pass : this.event.pass,
         registrationDate: this.nowTs,
         lastloginDate: "-",
         lpns: "{}"
      };
  var self=this;
  // append to table
  this.dynamo.putItem({
      TableName: 'zboota-users',
      Item: data 
  },function(err,data) {
    if(err) {
      self.context.fail("Error",err);
    } else {
      self.context.succeed({});
    }
  });
};

DdbUser.prototype.newUser=function() {
  // check if valid before sending email
  var self=this;
  MailManager.mailValidate(
    this.event.email,
    function(err, valid) {
      if(err) {
        self.context.fail(err);
        return;
      }

        if(!valid) {
          self.context.fail("Invalid email "+self.event.email);
          return;
        }

        self.connect(function() {
          if(self.checkEmailRegistered()) { 
            self.context.fail("Email address already registered.");
            return;
          }

          // throws an exception if the email exists
          self.generatePassword();
      
          // send email
          MailManager.mailSend(
            self.event.email,
            "Zboota registration",
            "Welcome to Zboota. Your password is "+self.event.pass,
            { fail: function(err) { self.context.fail("Failed to send email to "+self.event.email); },
              succeed: function() {
                // append to table
                self.initiateAccount();
              }
            });
        });
    });
};

DdbUser.prototype.loginCore=function() {
  var self=this;
  this.connect(function() {
    if(!self.checkEmailRegistered()) {
      self.context.fail("Email address not registered.");
    } else {
      if(!self.checkPassFail()) {
        self.context.fail("Account locked.");
        return;
      }
      self.checkPassword(function() {
        self.dropPassFail(function() {
          self.updateLastloginDate(function() {
            if(!self.silent) console.log('Response to event:', JSON.stringify(self.entry.lpns, null, 2));
            self.context.succeed(self.entry['lpns']);
          });
        });
      });
    }
  });
};

DdbUser.prototype.getEntry=function() { return this.entry; };

DdbUser.prototype.DdbUser = DdbUser;

module.exports = function (event,context,silent,skipPassCheck) {
  return new DdbUser(event,context,silent,skipPassCheck);
};

