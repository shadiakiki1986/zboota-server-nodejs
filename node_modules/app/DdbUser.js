var AWS = require("aws-sdk");
var doc = require('dynamodb-doc'); // https://www.npmjs.com/package/dynamodb-doc
var MailManager = require('app/MailManager');

AWS.config.update({region:"us-west-2"});

var MAX_PASS_FAIL=4;

// JS Class declaration
// For nodejs exports, check bottom of file
function DdbUser() {

  var event,context,silent;
  this.entry={};
  this.dynamo = new doc.DynamoDB();
  var self=this;

  this.init=function(event,context,silent) {
  // event: structure containing data: email, pass, region
  // context: object with succeed function and fail function
    self.event=event;
    self.context=context;
    self.entry={};

    silent=!!silent;
    self.silent=silent;
    if(!self.silent) console.log('Received event:', JSON.stringify(event, null, 2));

    self.nowTs=new Date().toISOString().substr(0,19).replace("T"," ");
  };
  
  this.connect = function(cbFun) {
      self.dynamo.getItem({
          TableName: "zboota-users",
//          region: "us-west-2",
          Key:{"email":self.event.email}
      }, function(err,data) {
      //console.log("data",data);
        if(!!data&&!err&&data.hasOwnProperty("Item")) {
          self.entry=data.Item;
        } else {
          self.entry=null;
        }
        cbFun();
      });
  };

  this.checkEmailRegistered=function(exceptionIfNot) {
    exceptionIfNot=!!exceptionIfNot;
    if(exceptionIfNot) {
      if( !self.entry) { self.context.fail("Email address not registered."); return false; }
    } else {
      if(!!self.entry) { self.context.fail("Email address already registered."); return false; }
    }
    return true;
  };

  this.checkPassFail=function() {
    pf=0;
    if(self.entry.hasOwnProperty('passFail')) {
      pf = parseInt(self.entry['passFail']);
    }
    if(pf>=MAX_PASS_FAIL) { self.context.fail("Account locked."); return false; }
    return true;
  };

  this.incrementPassFail=function() {
    if(!self.entry.hasOwnProperty('passFail')) self.entry['passFail']=0;
    self.entry['passFail']=self.entry['passFail']+1;

    // http://docs.aws.amazon.com/aws-sdk-php/v2/api/class-Aws.DynamoDb.DynamoDbClient.html#_updateItem
    // http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html#Expressions.Modifying.UpdateExpressions.ADD
    self.dynamo.updateItem({
        TableName: 'zboota-users',
        Key: { email: self.event.email },
        ExpressionAttributeValues: { ':v1': 1, ':v0': 0},
        UpdateExpression: 'SET passFail = if_not_exists(passFail,:v0) + :v1'
    },function(err,data) {
      if(err) { self.context.fail("Error",err); return; }
      self.context.fail("Wrong password.");
    });
  };
  
  this.checkPassword=function(cbFun) {
    // manage the passFail parameter for locking accounts
    if(self.entry['pass']!=self.event.pass) {
      self.incrementPassFail();
    } else {
      cbFun();
    }
  };

  this.dropPassFail=function(cbFun) {
    if(self.entry.hasOwnProperty("passFail")) delete self.entry.passFail;
    self.dynamo.updateItem({
        TableName: 'zboota-users',
        Key: { 'email': self.event.email },
        UpdateExpression: 'REMOVE passFail'
    },function(err,data) {
      if(err) { self.context.fail("Error",err); return; }
      cbFun();
    });
  };

  this.updateAccountNumbers=function(lpns,cbFun) {
    self.entry['lpns']=lpns; // overwrite existing data with given data
    self.dynamo.updateItem({
        TableName: 'zboota-users',
        Key: { 'email': self.event.email },
        ExpressionAttributeValues: {':v1': lpns},
        UpdateExpression: 'SET lpns = :v1'
    },function(err,data) {
      if(err) { self.context.fail("Error",err); return; }
      cbFun();
    });
  };

  this.updateLastloginDate=function(cbFun) {
    self.entry['lastloginDate']=self.nowTs; // overwrite existing data with given data
    self.dynamo.updateItem({
        TableName: 'zboota-users',
        Key: { 'email': self.event.email },
        ExpressionAttributeValues: {':v1': self.nowTs},
        UpdateExpression: 'SET lastloginDate = :v1'
    },function(err,data) {
      if(err) { self.context.fail("Error",err); return; }
      cbFun();
    });
  };

  this.generatePassword=function() {
    // generate random code
    self.event.pass=Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0,5);
  };

  this.initiateAccount=function(cbFun) {
    // append to table
    self.dynamo.putItem({
        TableName: 'zboota-users',
        Item: {
            email: self.event.email,
            pass : self.event.pass,
            registrationDate: self.nowTs,
            lastloginDate: "-",
            lpns: "{}"
        }
    },function(err,data) {
      if(err) { self.context.fail("Error",err); return; }
      cbFun();
    });
  };

  this.newUser=function(cbFun) {
    // check if valid before sending email
    MailManager.mailValidate(
      self.event.email,
      { fail: function(err) { self.context.fail(err); },
        succeed: function(valid) {
          if(!valid) {
            self.context.fail("Invalid email "+self.event.email);
            return;
          }

          self.connect(function() {
            if(!self.checkEmailRegistered(false)) { // throws an exception if the email exists
              self.generatePassword();
          
              // send email
              MailManager.mailSend(
                self.event.email,
                "Zboota registration",
                "Welcome to Zboota. Your password is "+self.event.pass,
                { fail: function(err) { self.context.fail("Failed to send email to "+self.event.email); },
                  succeed: function(msg) {
                    // append to table
                    self.initiateAccount(cbFun);
                  }
                });
              } // end if registered
          });
        }
      });

  };

  this.loginCore=function(event,context,silent) {
    if(!event.hasOwnProperty("email")||!event.hasOwnProperty("pass")) {
      context.fail("Missing email or password");
      return;
    }
    self.init(event,context,silent);
    self.connect(function() {
      if(self.checkEmailRegistered(true)) {
        if(self.checkPassFail()) {
          self.checkPassword(function() {
            self.dropPassFail(function() {
              self.updateLastloginDate(function() {
                if(!self.silent) console.log('Response to event:', JSON.stringify(self.entry.lpns, null, 2));
                self.context.succeed(self.entry['lpns']);
              });
            });
          });
        }
      }
    });
  };

  this.getEntry=function() { return self.entry; };

} // end class DdbUser

du=new DdbUser();
exports.loginCore=du.loginCore;
exports.init=du.init;
exports.connect=du.connect;
exports.getEntry=du.getEntry;
exports.dropPassFail=du.dropPassFail;
exports.newUser=du.newUser;
