var DdbGet=require('app/DdbGet');
var AWS = require("aws-sdk");
var doc = require('dynamodb-doc'); // https://www.npmjs.com/package/dynamodb-doc
var config = require('app/config.json');
require('app/ArrayUnique');

AWS.config.update({region: config.ZBOOTA_SERVER_AWS_REGION});

// JS Class declaration
// For nodejs exports, check bottom of file
var DdbManager = function() {
  this.dynamo = new doc.DynamoDB();
};

DdbManager.prototype.get = function(event, context) {
  var dg = new DdbGet(event,context,true);
  if(!dg.invalid) dg.get();
};

DdbManager.prototype.getNotSilent = function(event, context) {
  var dg = new DdbGet(event,context,false);
  if(!dg.invalid) dg.get();
};

DdbManager.prototype.drop=function(key, context) {
  this.dynamo.deleteItem({
      "TableName":"zboota-cars",
      "Key":{"id":key}
  }, function(err,data) {
      if(err!=null) {
        context.fail("Failed to remove from ddb. "+err);
      } else { context.succeed(); }
  }); 
};

DdbManager.prototype.exists = function(key, context) {
  this.dynamo.getItem({
      "TableName":"zboota-cars",
      "Key":{"id":key}
  }, function(err,data) {
    if(err!=null) {
      context.fail("Failed to remove from ddb. "+err);
    } else {
      context.succeed(data!=null && Object.keys(data).length!=0);
    }
  });
};

DdbManager.prototype.listUsers = function(context) {
  this.dynamo.scan(
    { "TableName":"zboota-users" },
    function(err,data) {
      if(err!=null||data==null||Object.keys(data).length==0) {
        context.fail("Failed to list registered user cars from ddb. "+err);
      } else {
        // at this point, data.Items is an array of objects as follows
        // { lastloginDate: '2015-05-23 08:45:23',
        //   email: 'Chajoubr@dm.net.lb',
        //   pass: '60f4f',
        //   registrationDate: '2015-05-15 11:10:09',
        //   lpns: '{"G/319636":{"a":"G","n":"319636","l":"Private"}}' },
        context.succeed(data.Items);
      }
    }
  );
};

DdbManager.prototype.listUserCars = function(context) {
  this.listUsers(
    { fail: context.fail,
      succeed: function(data) {
        cars = [];
        data.forEach(function(x) {
          carsInd = JSON.parse(x.lpns);
          Object.keys(carsInd).forEach(function(y) {
            cars.push({a:carsInd[y].a,n:carsInd[y].n});
          });
        });
        context.succeed(cars);
      }
    }
  );
};

DdbManager.prototype.listCars = function(context) {
  this.dynamo.scan(
    { "TableName":"zboota-cars" },
    function(err,data) {
      if(err!=null||data==null||Object.keys(data).length==0) {
        context.fail("Failed to list registered user cars from ddb. "+err);
      } else {
        // at this point, data.Items is an array of objects as follows
        // { lastloginDate: '2015-05-23 08:45:23',
        //   email: 'Chajoubr@dm.net.lb',
        //   pass: '60f4f',
        //   registrationDate: '2015-05-15 11:10:09',
        //   lpns: '{"G/319636":{"a":"G","n":"319636","l":"Private"}}' },
        context.succeed(data.Items);
      }
    }
  );
};

DdbManager.prototype.syncDdbWeb = function(context) {
  this.listUserCars(
    { fail: context.fail,
      succeed: function(data) {
        data=data.unique();
//        data=data.slice(0,2);// for testing: .. remove afterwards
        var dg = new DdbGet(
          data,
          { fail: context.fail,
            succeed: function(result) {
              context.succeed();
            }
          },
          false,
          true
        );
        if(!dg.invalid) dg.get();
      }
    }
  );
};

DdbManager.prototype.DdbManager = DdbManager;

module.exports = function () {
  return new DdbManager();
};
