var DdbGet=require('app/DdbGet');
var AWS = require("aws-sdk");
var doc = require('dynamodb-doc'); // https://www.npmjs.com/package/dynamodb-doc
var config = require('app/config.json');
require('app/ArrayUnique');

AWS.config.update({region: config.ZBOOTA_SERVER_AWS_REGION});

// JS Class declaration
// For nodejs exports, check bottom of file
var DdbManager = function() {
  this.dynamo = new doc.DynamoDB();
};

DdbManager.prototype.get = function(event, context) {
  var dg = new DdbGet(event,context,true);
  if(!dg.invalid) dg.get();
};

DdbManager.prototype.getNotSilent = function(event, context) {
  var dg = new DdbGet(event,context,false);
  if(!dg.invalid) dg.get();
};

DdbManager.prototype.drop=function(key, context) {
  this.dynamo.deleteItem({
      "TableName":"zboota-cars",
      "Key":{"id":key}
  }, function(err,data) {
      if(err!=null) {
        context.fail("Failed to remove from ddb. "+err);
      } else { context.succeed(); }
  }); 
};

DdbManager.prototype.exists = function(key, context) {
  this.dynamo.getItem({
      "TableName":"zboota-cars",
      "Key":{"id":key}
  }, function(err,data) {
    if(err!=null) {
      context.fail("Failed to remove from ddb. "+err);
    } else {
      context.succeed(data!=null && Object.keys(data).length!=0);
    }
  });
};

DdbManager.prototype.listUsers = function(context) {
  this.dynamo.scan(
    { "TableName":"zboota-users" },
    function(err,data) {
      if(err!=null||data==null||Object.keys(data).length==0) {
        context.fail("Failed to list registered user cars from ddb. "+err);
      } else {
        // at this point, data.Items is an array of objects as follows
        // { lastloginDate: '2015-05-23 08:45:23',
        //   email: 'Chajoubr@dm.net.lb',
        //   pass: '60f4f',
        //   registrationDate: '2015-05-15 11:10:09',
        //   lpns: '{"G/319636":{"a":"G","n":"319636","l":"Private"}}' },
        context.succeed(data.Items);
      }
    }
  );
};

DdbManager.prototype.listUserCars = function(context) {
  this.listUsers(
    { fail: context.fail,
      succeed: function(data) {

        // filter out locked users
        data = data.filter(function(x) { return !x.hasOwnProperty('passFail') || x.passFail < config.MAX_PASS_FAIL; });

        cars = [];
        data.forEach(function(x) {
          carsInd = JSON.parse(x.lpns);
          Object.keys(carsInd).forEach(function(y) {
            cars.push({
              a:carsInd[y].a,
              n:carsInd[y].n
            });
          });
        });
        context.succeed(cars);
      }
    }
  );
};

DdbManager.prototype.listCars = function(context) {
  this.dynamo.scan(
    { "TableName":"zboota-cars" },
    function(err,data) {
      if(err!=null||data==null||Object.keys(data).length==0) {
        context.fail("Failed to list registered user cars from ddb. "+err);
      } else {
        // at this point, data.Items is an array of objects as follows
        // { lastloginDate: '2015-05-23 08:45:23',
        //   email: 'Chajoubr@dm.net.lb',
        //   pass: '60f4f',
        //   registrationDate: '2015-05-15 11:10:09',
        //   lpns: '{"G/319636":{"a":"G","n":"319636","l":"Private"}}' },
        context.succeed(data.Items);
      }
    }
  );
};

DdbManager.prototype.syncDdbWeb = function(context) {
  var self=this;
  self.listCars({
    fail: context.fail,
    succeed: function(cars) {
      self.listUserCars(
        { fail: context.fail,
          succeed: function(userCars) {
            userCars=userCars.unique();
            var userCarIds=userCars.map(function(x) { return x.a+"/"+x.n; });
            cars=cars.filter(function(x) { return userCarIds.indexOf(x.a+"/"+x.n)!=-1; });

            var todayD=new Date().toISOString().substr(0,10);
            cars=cars.filter(function(x) {
              return x.dataTs.substring(0,10) < todayD;
            });

            //console.log("Original "+cars.length);
            //cars=cars.slice(0,2);// for testing: .. remove afterwards

            if(cars.length==0) {
                if(!self.verbose) console.log(new Date().toISOString()+": Node Nothing to sync");
                context.succeed();
                return;
            }

            if(!self.verbose) console.log(new Date().toISOString()+": Node Syncing "+cars.length+" cars");

            var dg = new DdbGet(
              cars,
              { fail: context.fail,
                succeed: function(result) {
		  if(!self.verbose) console.log(new Date().toISOString()+": Node Sync complete");
                  context.succeed();
                }
              },
              true,
              true
            );
            if(!dg.invalid) dg.get();
          }
        }
      );
    }
  });
};

DdbManager.prototype.registeredUsersDataMinDate = function(context,ismax) {
    var self=this;
    this.listCars({
      fail: context.fail,
      succeed: function(cars) {
        self.listUserCars({
          fail: context.fail,
          succeed: function(userCars) {
            var userCarIds=userCars.map(function(x) { return x.a+"/"+x.n; });
            cars=cars.filter(function(x) { return userCarIds.indexOf(x.a+"/"+x.n)!=-1; });
            var startDate = ismax? "0000-00-00" : "9999-99-99";
            var minDate = cars.map(function(x) {
              return x.dataTs.substring(0,10);
            }).reduce(function(a,b) {
              if(ismax) {
                if(a<b) return b; else return a;
              } else {
                if(a<b) return a; else return b;
              }
            },startDate);
            context.succeed(minDate);
          }
        });
      }
    });
};

// This sets back the dataTs field from today to yesterday so that when the users request the data again, they get refreshed data
DdbManager.prototype.revertDataDate = function(context) {
    var self=this;
    this.listCars({
      fail: context.fail,
      succeed: function(cars) {
            var todayD=new Date().toISOString().substr(0,10);
            var yesterdayTs=new Date();
            yesterdayTs.setDate(new Date().getDate() - 1);
            yesterdayTs=yesterdayTs.toISOString().replace(/T/," ").replace(/\..*/,"");

            cars.map(function(x) {
              var xd = x.dataTs.substring(0,10);
              if(xd==todayD) {
                console.log("Update "+x.a+"/"+x.n+" date from "+x.dataTs+" to "+yesterdayTs);
                self.dynamo.updateItem(
                  { "TableName":"zboota-cars",
                    "Key":{"id":x.a+"/"+x.n},
                    'ExpressionAttributeValues': {':tyest': yesterdayTs},
                    'UpdateExpression': 'SET dataTs = :tyest'
                  }, function(err,data) {
                    if(err!=null) {
                      context.fail("Failed to update ddb. "+err);
                    } else {
                      console.log("Done",data); // do nothing
                    }
                  });
              }
            });
            context.succeed("Done");
      }
    });
};

DdbManager.prototype.DdbManager = DdbManager;

module.exports = function () {
  return new DdbManager();
};
